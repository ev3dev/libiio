From 989db5ee8cc520ba08a328380a67c031496e7479 Mon Sep 17 00:00:00 2001
From: Lars-Peter Clausen <lars@metafoo.de>
Date: Mon, 26 Feb 2018 19:13:40 +0100
Subject: [PATCH 05/15] iio_adi_xflow_check: Fix getopt() handling

iio_adi_xflow_check currently assumes that the argument for an option that
is parsed by getopt_long() is in the argv[] following the option and then
the combination of option and argument always consumes two argv[] entries.

This is not necessarily true though. getopt_long() accepts option and
argument in the same argv[] entry. For short options the argument can
directly follow the option character and for long options the argument can
follow in the same argv[] entry separated by a '=' character.

E.g. both -u ip:192.168.1.1 and -uip:192.168.1.1 as well as --uri
192.168.1.1 and --uri=192.168.1.1 are equivalent and all valid.

As a result of this iio_adi_xflow_check will show undefined behavior when
option and argument are passed in the same argv[] entry (E.g. crash with a
segmentation fault).

To address this properly use the optarg and optind variables that are
provided by the getopt() interface. optarg points to the start of the
argument for the current option and optind will point to the first non
option argv[] entry after all options have been scanned.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
---
 tests/iio_adi_xflow_check.c | 26 ++++++++++++--------------
 1 file changed, 12 insertions(+), 14 deletions(-)

diff --git a/tests/iio_adi_xflow_check.c b/tests/iio_adi_xflow_check.c
index 99b7c33..7d69888 100644
--- a/tests/iio_adi_xflow_check.c
+++ b/tests/iio_adi_xflow_check.c
@@ -200,7 +200,9 @@ static struct iio_context *scan(void)
 int main(int argc, char **argv)
 {
 	unsigned int buffer_size = 1024 * 1024;
-	int c, option_index = 0, arg_index = 0, ip_index = 0, uri_index = 0;
+	int c, option_index = 0;
+	const char *arg_uri = NULL;
+	const char *arg_ip = NULL;
 	unsigned int n_tx = 0, n_rx = 0;
 	static struct iio_context *ctx;
 	static struct xflow_pthread_data xflow_pthread_data;
@@ -220,8 +222,7 @@ int main(int argc, char **argv)
 			usage(argv);
 			return EXIT_SUCCESS;
 		case 's':
-			arg_index += 2;
-			ret = sscanf(argv[arg_index], "%u%c", &buffer_size, &unit);
+			ret = sscanf(optarg, "%u%c", &buffer_size, &unit);
 			if (ret == 0)
 				return EXIT_FAILURE;
 			if (ret == 2) {
@@ -232,15 +233,12 @@ int main(int argc, char **argv)
 			}
 			break;
 		case 'n':
-			arg_index += 2;
-			ip_index = arg_index;
+			arg_ip = optarg;
 			break;
 		case 'u':
-			arg_index += 2;
-			uri_index = arg_index;
+			arg_uri = optarg;
 			break;
 		case 'a':
-			arg_index += 1;
 			scan_for_context = true;
 			break;
 		case '?':
@@ -248,7 +246,7 @@ int main(int argc, char **argv)
 		}
 	}
 
-	if (arg_index + 1 >= argc) {
+	if (optind + 1 != argc) {
 		fprintf(stderr, "Incorrect number of arguments.\n\n");
 		usage(argv);
 		return EXIT_FAILURE;
@@ -264,10 +262,10 @@ int main(int argc, char **argv)
 
 	if (scan_for_context)
 		ctx = scan();
-	else if (uri_index)
-		ctx = iio_create_context_from_uri(argv[uri_index]);
-	else if (ip_index)
-		ctx = iio_create_network_context(argv[ip_index]);
+	else if (arg_uri)
+		ctx = iio_create_context_from_uri(arg_uri);
+	else if (arg_ip)
+		ctx = iio_create_network_context(arg_ip);
 	else
 		ctx = iio_create_default_context();
 
@@ -276,7 +274,7 @@ int main(int argc, char **argv)
 		return EXIT_FAILURE;
 	}
 
-	device_name = argv[arg_index + 1];
+	device_name = argv[optind];
 
 	dev = get_device(ctx, device_name);
 	if (!dev) {
-- 
2.11.0

