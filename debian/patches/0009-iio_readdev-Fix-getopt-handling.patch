From c8d5306ded3b03b3ddf1653d29e9eca100c43fd4 Mon Sep 17 00:00:00 2001
From: Lars-Peter Clausen <lars@metafoo.de>
Date: Mon, 26 Feb 2018 19:14:49 +0100
Subject: [PATCH 09/15] iio_readdev: Fix getopt() handling

iio_readdev currently assumes that the argument for an option that is
parsed by getopt_long() is in the argv[] following the option and then the
combination of option and argument always consumes two argv[] entries.

This is not necessarily true though. getopt_long() accepts option and
argument in the same argv[] entry. For short options the argument can
directly follow the option character and for long options the argument can
follow in the same argv[] entry separated by a '=' character.

E.g. both -u ip:192.168.1.1 and -uip:192.168.1.1 as well as --uri
192.168.1.1 and --uri=192.168.1.1 are equivalent and all valid.

As a result of this iio_readdev will show undefined behavior when option
and argument are passed in the same argv[] entry (E.g. crash with a
segmentation fault).

To address this properly use the optarg and optind variables that are
provided by the getopt() interface. optarg points to the start of the
argument for the current option and optind will point to the first non
option argv[] entry after all options have been scanned.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
---
 tests/iio_readdev.c | 41 ++++++++++++++++++-----------------------
 1 file changed, 18 insertions(+), 23 deletions(-)

diff --git a/tests/iio_readdev.c b/tests/iio_readdev.c
index 83193a2..8305621 100644
--- a/tests/iio_readdev.c
+++ b/tests/iio_readdev.c
@@ -249,7 +249,9 @@ int main(int argc, char **argv)
 {
 	unsigned int i, nb_channels;
 	unsigned int buffer_size = SAMPLES_PER_READ;
-	int c, option_index = 0, arg_index = 0, ip_index = 0, uri_index = 0;
+	const char *arg_uri = NULL;
+	const char *arg_ip = NULL;
+	int c, option_index = 0;
 	struct iio_device *dev;
 	size_t sample_size;
 	int timeout = -1;
@@ -262,39 +264,32 @@ int main(int argc, char **argv)
 			usage();
 			return EXIT_SUCCESS;
 		case 'n':
-			arg_index += 2;
-			ip_index = arg_index;
+			arg_ip = optarg;
 			break;
 		case 'u':
-			arg_index += 2;
-			uri_index = arg_index;
+			arg_uri = optarg;
 			break;
 		case 'a':
-			arg_index += 1;
 			scan_for_context = true;
 			break;
 		case 't':
-			arg_index += 2;
-			trigger_name = argv[arg_index];
+			trigger_name = optarg;
 			break;
 		case 'b':
-			arg_index += 2;
-			buffer_size = atoi(argv[arg_index]);
+			buffer_size = atoi(optarg);
 			break;
 		case 's':
-			arg_index += 2;
-			num_samples = atoi(argv[arg_index]);
+			num_samples = atoi(optarg);
 			break;
 		case 'T':
-			arg_index += 2;
-			timeout = atoi(argv[arg_index]);
+			timeout = atoi(optarg);
 			break;
 		case '?':
 			return EXIT_FAILURE;
 		}
 	}
 
-	if (arg_index + 1 >= argc) {
+	if (argc == optind) {
 		fprintf(stderr, "Incorrect number of arguments.\n\n");
 		usage();
 		return EXIT_FAILURE;
@@ -304,10 +299,10 @@ int main(int argc, char **argv)
 
 	if (scan_for_context)
 		ctx = scan();
-	else if (uri_index)
-		ctx = iio_create_context_from_uri(argv[uri_index]);
-	else if (ip_index)
-		ctx = iio_create_network_context(argv[ip_index]);
+	else if (arg_uri)
+		ctx = iio_create_context_from_uri(arg_uri);
+	else if (arg_ip)
+		ctx = iio_create_network_context(arg_ip);
 	else
 		ctx = iio_create_default_context();
 
@@ -319,9 +314,9 @@ int main(int argc, char **argv)
 	if (timeout >= 0)
 		iio_context_set_timeout(ctx, timeout);
 
-	dev = iio_context_find_device(ctx, argv[arg_index + 1]);
+	dev = iio_context_find_device(ctx, argv[optind]);
 	if (!dev) {
-		fprintf(stderr, "Device %s not found\n", argv[arg_index + 1]);
+		fprintf(stderr, "Device %s not found\n", argv[optind]);
 		iio_context_destroy(ctx);
 		return EXIT_FAILURE;
 	}
@@ -355,7 +350,7 @@ int main(int argc, char **argv)
 
 	nb_channels = iio_device_get_channels_count(dev);
 
-	if (argc == arg_index + 2) {
+	if (argc == optind + 1) {
 		/* Enable all channels */
 		for (i = 0; i < nb_channels; i++)
 			iio_channel_enable(iio_device_get_channel(dev, i));
@@ -363,7 +358,7 @@ int main(int argc, char **argv)
 		for (i = 0; i < nb_channels; i++) {
 			unsigned int j;
 			struct iio_channel *ch = iio_device_get_channel(dev, i);
-			for (j = arg_index + 2; j < (unsigned int) argc; j++) {
+			for (j = optind + 1; j < (unsigned int) argc; j++) {
 				const char *n = iio_channel_get_name(ch);
 				if (!strcmp(argv[j], iio_channel_get_id(ch)) ||
 						(n && !strcmp(n, argv[j])))
-- 
2.11.0

