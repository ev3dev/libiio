From 19d642c49d211f5af5ae11d30dcb4828b2603f22 Mon Sep 17 00:00:00 2001
From: Lars-Peter Clausen <lars@metafoo.de>
Date: Mon, 26 Feb 2018 19:14:23 +0100
Subject: [PATCH 07/15] iio_genxml: Fix getopt() handling

iio_genxml currently assumes that the argument for an option that is parsed
by getopt_long() is in the argv[] following the option and then the
combination of option and argument always consumes two argv[] entries.

This is not necessarily true though. getopt_long() accepts option and
argument in the same argv[] entry. For short options the argument can
directly follow the option character and for long options the argument can
follow in the same argv[] entry separated by a '=' character.

E.g. both -u ip:192.168.1.1 and -uip:192.168.1.1 as well as --uri
192.168.1.1 and --uri=192.168.1.1 are equivalent and all valid.

As a result of this iio_genxml will show undefined behavior when option and
argument are passed in the same argv[] entry (E.g. crash with a
segmentation fault).

To address this properly use the optarg and optind variables that are
provided by the getopt() interface. optarg points to the start of the
argument for the current option and optind will point to the first non
option argv[] entry after all options have been scanned.

Signed-off-by: Lars-Peter Clausen <lars@metafoo.de>
---
 tests/iio_genxml.c | 23 +++++++++++------------
 1 file changed, 11 insertions(+), 12 deletions(-)

diff --git a/tests/iio_genxml.c b/tests/iio_genxml.c
index 9ad1f03..4a83c8c 100644
--- a/tests/iio_genxml.c
+++ b/tests/iio_genxml.c
@@ -66,8 +66,10 @@ int main(int argc, char **argv)
 {
 	char *xml;
 	struct iio_context *ctx;
-	int c, option_index = 0, arg_index = 0, xml_index = 0, ip_index = 0;
-	int uri_index = 0;
+	int c, option_index = 0;
+	const char *arg_uri = NULL;
+	const char *arg_xml = NULL;
+	const char *arg_ip = NULL;
 	enum backend backend = LOCAL;
 
 	while ((c = getopt_long(argc, argv, "+hn:x:u:",
@@ -82,8 +84,7 @@ int main(int argc, char **argv)
 				return EXIT_FAILURE;
 			}
 			backend = NETWORK;
-			arg_index += 2;
-			ip_index = arg_index;
+			arg_ip = optarg;
 			break;
 		case 'x':
 			if (backend != LOCAL) {
@@ -91,12 +92,10 @@ int main(int argc, char **argv)
 				return EXIT_FAILURE;
 			}
 			backend = XML;
-			arg_index += 2;
-			xml_index = arg_index;
+			arg_xml = optarg;
 			break;
 		case 'u':
-			arg_index += 2;
-			uri_index = arg_index;
+			arg_uri = optarg;
 			backend = AUTO;
 			break;
 		case '?':
@@ -104,18 +103,18 @@ int main(int argc, char **argv)
 		}
 	}
 
-	if (arg_index >= argc) {
+	if (optind != argc) {
 		fprintf(stderr, "Incorrect number of arguments.\n\n");
 		usage();
 		return EXIT_FAILURE;
 	}
 
 	if (backend == AUTO) 
-		ctx = iio_create_context_from_uri(argv[uri_index]);
+		ctx = iio_create_context_from_uri(arg_uri);
 	else if (backend == XML)
-		ctx = iio_create_xml_context(argv[xml_index]);
+		ctx = iio_create_xml_context(arg_xml);
 	else if (backend == NETWORK)
-		ctx = iio_create_network_context(argv[ip_index]);
+		ctx = iio_create_network_context(arg_ip);
 	else
 		ctx = iio_create_default_context();
 
-- 
2.11.0

